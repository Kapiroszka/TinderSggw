/*
 * This file is generated by jOOQ.
 */
package com.pl.sggw.tinder.jooq.tables.records


import com.pl.sggw.tinder.jooq.tables.UserInformation

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserInformationRecord() : TableRecordImpl<UserInformationRecord>(UserInformation.USER_INFORMATION), Record6<Long?, String?, String?, ByteArray?, LocalDateTime?, LocalDateTime?> {

    var userId: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var description: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var phoneNumber: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var photo: ByteArray?
        set(value) = set(3, value)
        get() = get(3) as ByteArray?

    var creationTimestamp: LocalDateTime?
        set(value) = set(4, value)
        get() = get(4) as LocalDateTime?

    var modificationTimestamp: LocalDateTime?
        set(value) = set(5, value)
        get() = get(5) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Long?, String?, String?, ByteArray?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row6<Long?, String?, String?, ByteArray?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row6<Long?, String?, String?, ByteArray?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row6<Long?, String?, String?, ByteArray?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<Long?> = UserInformation.USER_INFORMATION.USER_ID
    override fun field2(): Field<String?> = UserInformation.USER_INFORMATION.DESCRIPTION
    override fun field3(): Field<String?> = UserInformation.USER_INFORMATION.PHONE_NUMBER
    override fun field4(): Field<ByteArray?> = UserInformation.USER_INFORMATION.PHOTO
    override fun field5(): Field<LocalDateTime?> = UserInformation.USER_INFORMATION.CREATION_TIMESTAMP
    override fun field6(): Field<LocalDateTime?> = UserInformation.USER_INFORMATION.MODIFICATION_TIMESTAMP
    override fun component1(): Long? = userId
    override fun component2(): String? = description
    override fun component3(): String? = phoneNumber
    override fun component4(): ByteArray? = photo
    override fun component5(): LocalDateTime? = creationTimestamp
    override fun component6(): LocalDateTime? = modificationTimestamp
    override fun value1(): Long? = userId
    override fun value2(): String? = description
    override fun value3(): String? = phoneNumber
    override fun value4(): ByteArray? = photo
    override fun value5(): LocalDateTime? = creationTimestamp
    override fun value6(): LocalDateTime? = modificationTimestamp

    override fun value1(value: Long?): UserInformationRecord {
        this.userId = value
        return this
    }

    override fun value2(value: String?): UserInformationRecord {
        this.description = value
        return this
    }

    override fun value3(value: String?): UserInformationRecord {
        this.phoneNumber = value
        return this
    }

    override fun value4(value: ByteArray?): UserInformationRecord {
        this.photo = value
        return this
    }

    override fun value5(value: LocalDateTime?): UserInformationRecord {
        this.creationTimestamp = value
        return this
    }

    override fun value6(value: LocalDateTime?): UserInformationRecord {
        this.modificationTimestamp = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: ByteArray?, value5: LocalDateTime?, value6: LocalDateTime?): UserInformationRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised UserInformationRecord
     */
    constructor(userId: Long? = null, description: String? = null, phoneNumber: String? = null, photo: ByteArray? = null, creationTimestamp: LocalDateTime? = null, modificationTimestamp: LocalDateTime? = null): this() {
        this.userId = userId
        this.description = description
        this.phoneNumber = phoneNumber
        this.photo = photo
        this.creationTimestamp = creationTimestamp
        this.modificationTimestamp = modificationTimestamp
    }
}
